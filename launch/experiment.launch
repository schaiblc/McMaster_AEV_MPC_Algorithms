<?xml version="1.0"?>
<launch>
  <!-- Listen to messages from joysicks -->
  <node pkg="joy" name="joy_node" type="joy_node">
  <param name="autorepeat_rate" value="2"/>
  </node>

  <!-- launch vesc driver node -->

  <arg name="node_name" default="vesc_driver_node" />
  <!-- Optionally launch in GDB, for debugging -->
  <arg name="debug" default="false" />
  <arg if="$(arg debug)" name="launch_prefix" value="xterm -e gdb --args" />
  <arg unless="$(arg debug)" name="launch_prefix" value="" />

  <!-- VESC driver parameters -->
  <arg name="port" default="/dev/sensors/vesc" />

  <!-- VESC driver node -->
  <node pkg="vesc_driver" type="vesc_driver_node" name="$(arg node_name)"
        output="screen" launch-prefix="$(arg launch_prefix)" >
    <param name="port" value="$(arg port)" />
  </node>

<node pkg="tf2_ros" type="static_transform_publisher" name="base_link_to_imu" 
        args="0.01286 0.0 0.06119    0.0 0.0 0.7071067811865475 0.7071067811865475 base_link imu" />

 <node pkg="tf2_ros" type="static_transform_publisher" name="base_link_to_laser" 
        args="0.01286 0.0 0.076 0.0 0.0 1.0 0.0 base_link laser" />

 <node pkg="tf2_ros" type="static_transform_publisher" name="base_link_to_camera" 
        args="0.292 0.0 0.86 -1.5708 0 -1.5708 base_link camera_link" />
       
  <!--  launch rplidar driver node-->
  <node pkg="rplidar_ros" name="rplidarNode" type="rplidarNode">
  <param name="port" value="/dev/sensors/rplidar" />
  <param name="frame_id" type="string" value="laser"/>
  <param name="inverted"  type="bool"   value="false"/>
  <param name="angle_compensate"  type="bool"   value="true"/>
  <param name="scan_mode"   type="string" value="Boost"/>
  <remap from="scan" to="scan2"/>
  </node>
  
  <!--  launch IMU driver node -->
  <node ns="imu" name="imu_node" pkg="imu_bno055" type="bno055_i2c_node" respawn="true" respawn_delay="2">
     <param name="device" type="string" value="/dev/i2c-7"/>
     <param name="address" type="int" value="40"/> <!-- 0x28 == 40 is the default for c -->
     <param name="frame_id" type="string" value="imu"/>
     <!--remap from="/imu/data" to="/imu"/-->
    </node>

 <!-- Load the map server, map used for AMCL localization -->
  <node name="map_server" pkg="map_server" type="map_server" args="$(find f1tenth_simulator)/maps/experiment6.yaml"/>


<!--> launch AMCL (Adaptive Monte Carlo Localization) for MPC using a pre-existing map -->

  <node name="amcl" pkg="amcl" type="amcl" output="screen">
    <param name="odom_frame_id" value="odom"/>
    <param name="base_frame_id" value="base_link"/>
    <param name="scan_topic" value="scan"/>
    <param name="use_map_topic" value="true"/>
    <param name="update_min_d" value="0.2" />
    <param name="update_min_a" value="0.52" />
    <param name="first_map_only" value="true" />
    <param name="use_map_topic" value="true" />
    <param name="min_particles" value="10000" />
    <param name="max_particles" value="10000" />
    <param name="resample_interval" value="1" />
    <param name="initial_pose_x" value="0" />
    <param name="initial_pose_y" value="0" />
    <param name="initial_pose_a" value="0" />
    <param name="recovery_alpha_slow" value="0.001" />
    <param name="recovery_alpha_fast" value="0.1" /> 
    <param name="laser_max_range" value="15.0" />
    <param name="laser_min_range" value="0.1" />

    <param name="initial_cov_xx" value="0.1" />
    <param name="initial_cov_yy" value="0.1" />
    <param name="initial_cov_aa" value="0.1" />
  </node>



<!-- launch laser scan matcher -->

<!-- <?ignore -->
  <!-- <node pkg="laser_scan_matcher" type="laser_scan_matcher_node" 
    name="laser_scan_matcher_node" output="screen">
    <param name="fixed_frame" value = "odom"/>
    <param name="max_iterations" value="10"/>
    <param name="base_frame" value="base_link"/>
    <param name="use_imu" value="true"/>
    <param name="use_odom" value="true"/>
    <param name="publish_pose_stamped" value="true"/>
    <param name="kf_dist_linear" value="0.1"/>
    <param name="kf_dist_angular" value="0.175"/>

  </node> -->
<!-- ?> -->

<!--> launch hector slam (Uncomment hector slam and comment map server & AMCL to perform SLAM, save a new map for future localization) -->

<!-- <?ignore -->


  <!-- <node pkg="hector_mapping" type="hector_mapping" name="hector_mapping" output="screen">
    
    <param name="map_frame" value="odom"/>
    <param name="base_frame" value="base_link" />
    <param name="odom_frame" value="base_link" />
    
    
    <param name="use_tf_scan_transformation" value="true"/>
    <param name="use_tf_pose_start_estimate" value="false"/>
    <param name="pub_map_odom_transform" value="true"/>
    
  
    <param name="map_resolution" value="0.050"/>
    <param name="map_size" value="$2048"/>
    <param name="map_start_x" value="0.5"/>
    <param name="map_start_y" value="0.5" />
    <param name="map_multi_res_levels" value="2" />
    
   
    <param name="update_factor_free" value="0.4"/>
    <param name="update_factor_occupied" value="0.9" />    
    <param name="map_update_distance_thresh" value="0.4"/>
    <param name="map_update_angle_thresh" value="0.15" />
     
    <param name="advertise_map_service" value="true"/>   
    <param name="scan_subscriber_queue_size" value="5"/>
    <param name="scan_topic" value="scan"/>   
    <param name="tf_map_scanmatch_transform_frame_name" value="scanmatcher_frame" />

  </node> -->
   
<!-- ?> -->


  <!-- Launch realsense depth camera -->
  
  <include file="$(find realsense2_camera)/launch/rs_camera.launch">
      <arg name="enable_color"                value="true"/>
      <arg name="enable_depth"                value="true"/>
      <!-- <arg name= "align_depth"                value="true"/> -->
      <!-- <arg name= "enable_sync"                value="true"/> -->
      <!-- <arg name= "color_fps"                  value="30"/>
      <arg name= "depth_fps"                  value="30"/>
      <arg name= "depth_width"                value="848"/>
      <arg name= "depth_height"               value="480"/>
      <arg name= "color_width"                value="848"/>
      <arg name= "color_height"               value="480"/> -->
  </include>

  <!-- Launch the mux node with the parameters from params.yaml -->
  <node pkg="f1tenth_simulator" name="mux_controller" type="mux" output="screen">
    <rosparam command="load" file="$(find f1tenth_simulator)/params.yaml"/>
  </node>


  <node pkg="f1tenth_simulator" name="racecar_experiment" type="experiment" output="screen">
    <rosparam command="load" file="$(find f1tenth_simulator)/params.yaml"/>
  </node>

  <!-- Launch the behavior controller node with the parameters from params.yaml -->
  <node pkg="f1tenth_simulator" name="behavior_controller" type="behavior_controller" output="screen">
    <rosparam command="load" file="$(find f1tenth_simulator)/params.yaml"/>
  </node>

  <!-- Launch the Keyboard Node -->
  <node pkg="f1tenth_simulator" name="keyboard" type="keyboard" output="screen">
    <rosparam command="load" file="$(find f1tenth_simulator)/params.yaml"/>
  </node>

  <!-- Choose to launch MPC via <Navigation> , <Navigation_Bezier> or <Navigation_Velocity> -->

  <node pkg="f1tenth_simulator" name="navigation_STLMPC" type="navigation_STLMPC" output="screen">
    <rosparam command="load" file="$(find f1tenth_simulator)/params.yaml"/>
  </node>

  <!-- <node pkg="f1tenth_simulator" name="navigation_QBMPC" type="navigation_QBMPC" output="screen">
    <rosparam command="load" file="$(find f1tenth_simulator)/params.yaml"/>
  </node> -->

  <!-- <node pkg="f1tenth_simulator" name="navigation_STLMPC_vary_v" type="navigation_STLMPC_vary_v" output="screen">
    <rosparam command="load" file="$(find f1tenth_simulator)/params.yaml"/>
  </node> -->



  <!-- Choose one of the leader-follower MPC Navigation nodes-->

  <!-- <node pkg="f1tenth_simulator" name="navigation_STLMPC" type="navigation_P_STLMPC" output="screen">
    <rosparam command="load" file="$(find f1tenth_simulator)/params.yaml"/>
  </node> -->

  <!-- <node pkg="f1tenth_simulator" name="navigation_QBMPC" type="navigation_P_QBMPC" output="screen">
    <rosparam command="load" file="$(find f1tenth_simulator)/params.yaml"/>
  </node> -->



  <!-- Non-predictive PD approach using one tracking line (for comparison)-->

  <!-- <node pkg="f1tenth_simulator" name="navigation_PD" type="navigation_PD" output="screen">
    <rosparam command="load" file="$(find f1tenth_simulator)/params.yaml"/>
  </node> -->



  <!-- Start the move_base node. Uncomment the local planner here, exploration to run exploration-based local planners -->
  <!-- <node pkg="move_base" type="move_base" name="move_base" output="screen"> -->
      <!-- <param name="controller_frequency" value="10.0" /> -->
      <!-- <param name="base_local_planner" value="teb_local_planner/TebLocalPlannerROS" /> -->
      <!-- <rosparam file="$(find f1tenth_simulator)/config/local_costmap_params.yaml" command="load"/> -->
      <!-- <rosparam file="$(find f1tenth_simulator)/config/global_costmap_params.yaml" command="load"/> -->
      <!-- <rosparam file="$(find f1tenth_simulator)/config/teb_local_planner_params.yaml" command="load"/> -->
  <!-- </node> -->

  <!-- Start the explore_lite node for exploration -->
  <!-- <rosparam file="$(find f1tenth_simulator)/config/explore_lite_params.yaml" command="load" /> -->
  <!-- <node pkg="explore_lite" type="explore" respawn="false" name="explore" output="screen"/> -->

  

  <node pkg="f1tenth_simulator" name="collision_assistance" type="collision_assistance.py" output="screen">
    <rosparam command="load" file="$(find f1tenth_simulator)/params.yaml"/>
  </node>


<!-- Launch Chosen Vision Model-->

  
  <node pkg="f1tenth_simulator" name="yolo" type="YOLO.py" output="screen" >
    <rosparam command="load" file="$(find f1tenth_simulator)/params.yaml"/>
  </node>
  

  <!-- <node pkg="f1tenth_simulator" name="FCN" type="FCN.py" output="screen">
    <rosparam command="load" file="$(find f1tenth_simulator)/params.yaml"/>
  </node> -->


<!-- Launch preset rviz config--> 
  <node type="rviz" name="rviz" pkg="rviz" args="-d $(find f1tenth_simulator)/rviz/config.rviz" />

  
  
  </launch>

